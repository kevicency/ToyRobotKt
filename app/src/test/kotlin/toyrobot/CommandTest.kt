/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package toyrobot

import java.io.ByteArrayOutputStream
import java.io.PrintStream
import kotlin.test.*


class CommandTest {
    @Test
    fun `report command`() {
        val robot = Robot(1, 2, Direction.NORTH)

        val bo = ByteArrayOutputStream()
        val out = PrintStream(bo)

        ReportCommand(out).run(Simulation(Board(), robot))

        bo.flush()

        assertEquals(robot.stringify(), bo.toString().trim('\n'))
    }

    @Test
    fun `left command`() {
        val sut = Simulation(Board(), Robot(1, 1, Direction.NORTH))

        LeftCommand.run(sut)

        assertEquals(Direction.WEST, sut.robot?.facing)
    }

    @Test
    fun `right command`() {
        val sut = Simulation(Board(), Robot(1, 1, Direction.NORTH))

        RightCommand.run(sut)

        assertEquals(Direction.EAST, sut.robot?.facing)
    }

    @Test
    fun `move command`() {
        val sut = Simulation(Board(), Robot(1, 1, Direction.NORTH))

        MoveCommand.run(sut)

        assertEquals(Direction.NORTH, sut.robot?.facing)
        assertEquals(Pair(1, 2), sut.robot?.position)
    }

    @Test
    fun `invalid move command`() {
        val sut = Simulation(Board(), Robot(0, 1, Direction.WEST))

        MoveCommand.run(sut)

        assertEquals(Direction.WEST, sut.robot?.facing)
        assertEquals(Pair(0, 1), sut.robot?.position)
    }

    @Test
    fun `place command`() {
        val sut = Simulation(Board())

        PlaceCommand(1, 2, Direction.NORTH).run(sut)

        assertEquals(Direction.NORTH, sut.robot?.facing)
        assertEquals(Pair(1, 2), sut.robot?.position)
    }

    @Test
    fun `invalid place command`() {
        val sut = Simulation(Board())

        PlaceCommand(-1, 2, Direction.NORTH).run(sut)

        assertNull(sut.robot)
    }

    @Test
    fun `invalid (re-)place command`() {
        val sut = Simulation(Board(), Robot(1, 2, Direction.NORTH))

        PlaceCommand(-1, 2, Direction.NORTH).run(sut)

        assertNotNull(sut.robot)
        assertEquals(1, sut.robot?.position?.first)
    }
}

class CommandParserTest {
    @Test
    fun `parse left command`() {
        assert(Command.parse("LEFT") is LeftCommand)
    }

    @Test
    fun `parse right command`() {
        assert(Command.parse("RIGHT") is RightCommand)
    }

    @Test
    fun `parse move command`() {
        assert(Command.parse("MOVE") is MoveCommand)
    }

    @Test
    fun `parse report command`() {
        assert(Command.parse("REPORT") is ReportCommand)
    }

    @Test
    fun `parse place command`() {
        val sut = Command.parse("PLACE 1,2,NORTH")

        if (sut is PlaceCommand) {
            assertEquals(sut.x, 1)
            assertEquals(sut.y, 2)
            assertEquals(sut.direction, Direction.NORTH)
        } else
            fail()
    }

    @Test
    fun `parse invalid command`() {
        assert(Command.parse("FOO") is InvalidCommand)
    }

    @Test
    fun `parse all`() {
        val sut = Command.parseAll("LEFT", "RIGHT", "MOVE")

        assertEquals(sut, listOf(LeftCommand, RightCommand, MoveCommand))
    }
}